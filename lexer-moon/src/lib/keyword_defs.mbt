/// Keywords as Array[UInt16]

///| "xport"
pub let word_xport_kw : Array[UInt16] = [120, 112, 111, 114, 116]

///| "mport"
pub let word_mport_kw : Array[UInt16] = [109, 112, 111, 114, 116]

///| "lass"
pub let word_lass_kw : Array[UInt16] = [108, 97, 115, 115]

///| "rom"
pub let word_rom_kw : Array[UInt16] = [114, 111, 109]

///| "eta"
pub let word_eta_kw : Array[UInt16] = [101, 116, 97]

///| "ssert"
pub let word_ssert_kw : Array[UInt16] = [115, 115, 101, 114, 116]

///| "vo"
pub let word_vo_kw : Array[UInt16] = [118, 111]

///| "yie"
pub let word_yie_kw : Array[UInt16] = [121, 105, 101]

///| "dele"
pub let word_dele_kw : Array[UInt16] = [100, 101, 108, 101]

///| "instan"
pub let word_instan_kw : Array[UInt16] = [105, 110, 115, 116, 97, 110]

///| "ty"
pub let word_ty_kw : Array[UInt16] = [116, 121]

///| "retur"
pub let word_retur_kw : Array[UInt16] = [114, 101, 116, 117, 114]

///| "debugge"
pub let word_debugge_kw : Array[UInt16] = [100, 101, 98, 117, 103, 103, 101]

///| "awai"
pub let word_awai_kw : Array[UInt16] = [97, 119, 97, 105]

///| "thr"
pub let word_thr_kw : Array[UInt16] = [116, 104, 114]

///| "while"
pub let word_while_kw : Array[UInt16] = [119, 104, 105, 108, 101]

///| "for"
pub let word_for_kw : Array[UInt16] = [102, 111, 114]

///| "if"
pub let word_if_kw : Array[UInt16] = [105, 102]

///| "catc"
pub let word_catc_kw : Array[UInt16] = [99, 97, 116, 99]

///| "finall"
pub let word_finall_kw : Array[UInt16] = [102, 105, 110, 97, 108, 108]

///| "els"
pub let word_els_kw : Array[UInt16] = [101, 108, 115]

///| "brea"
pub let word_brea_kw : Array[UInt16] = [98, 114, 101, 97]

///| "contin"
pub let word_contin_kw : Array[UInt16] = [99, 111, 110, 116, 105, 110]

///| "sync"
pub let word_sync_kw : Array[UInt16] = [115, 121, 110, 99]

///| "unction"
pub let word_unction_kw : Array[UInt16] = [117, 110, 99, 116, 105, 111, 110]

///| "ource"
pub let word_ource_kw : Array[UInt16] = [111, 117, 114, 99, 101]

///| "efer"
pub let word_efer_kw : Array[UInt16] = [101, 102, 101, 114]

///| "s"
pub let word_s_kw : Array[UInt16] = [115]

///| "default"
pub let word_default_kw : Array[UInt16] = [100, 101, 102, 97, 117, 108, 116]

///| "async"
pub let word_async_kw : Array[UInt16] = [97, 115, 121, 110, 99]

///| "function"
pub let word_function_kw: Array[UInt16] = [ 102, 117, 110, 99, 116, 105, 111, 110]

///| "class"
pub let word_class_kw : Array[UInt16] = [99, 108, 97, 115, 115]

///| "const"
pub let word_const_kw : Array[UInt16] = [99, 111, 110, 115, 116]

///| "var"
pub let word_var_kw : Array[UInt16] = [118, 97, 114]

///| "let"
pub let word_let_kw : Array[UInt16] = [108, 101, 116]

// Single character keywords, useful for direct comparison
///| 'a'
pub const CHAR_A : UInt16 = 97

///| 'c'
pub const CHAR_C : UInt16 = 99

///| 'd'
pub const CHAR_D : UInt16 = 100

///| 'e'
pub const CHAR_E : UInt16 = 101

///| 'f'
pub const CHAR_F : UInt16 = 102

///| 'h'
pub const CHAR_H : UInt16 = 104

///| 'i'
pub const CHAR_I : UInt16 = 105

///| 'k'
pub const CHAR_K : UInt16 = 107

///| 'l'
pub const CHAR_L : UInt16 = 108

///| 'm'
pub const CHAR_M : UInt16 = 109

///| 'n'
pub const CHAR_N : UInt16 = 110

///| 'o'
pub const CHAR_O : UInt16 = 111

///| 'r'
pub const CHAR_R : UInt16 = 114

///| 's'
pub const CHAR_S : UInt16 = 115

///| 't'
pub const CHAR_T : UInt16 = 116

///| 'u'
pub const CHAR_U : UInt16 = 117

///| 'v'
pub const CHAR_V : UInt16 = 118

///| 'w'
pub const CHAR_W : UInt16 = 119

///| 'y'
pub const CHAR_Y : UInt16 = 121

///| '('
pub const CHAR_PAREN_OPEN : UInt16 = 40

///| ')'
pub const CHAR_PAREN_CLOSE : UInt16 = 41

///| '{'
pub const CHAR_BRACE_OPEN : UInt16 = 123

///| '}'
pub const CHAR_BRACE_CLOSE : UInt16 = 125

///| '['
pub const CHAR_BRACKET_OPEN : UInt16 = 91

///| ']'
pub const CHAR_BRACKET_CLOSE : UInt16 = 93

///| '/'
pub const CHAR_SLASH : UInt16 = 47

///| '*'
pub const CHAR_ASTERISK : UInt16 = 42

///| '`'
pub const CHAR_BACKTICK : UInt16 = 96

///| '\''
pub const CHAR_SINGLE_QUOTE : UInt16 = 39

///| '"'
pub const CHAR_DOUBLE_QUOTE : UInt16 = 34

///| '$'
pub const CHAR_DOLLAR : UInt16 = 36

///| '\\'
pub const CHAR_BACKSLASH : UInt16 = 92

///| ','
pub const CHAR_COMMA : UInt16 = 44

///| ';'
pub const CHAR_SEMICOLON : UInt16 = 59

///| ':'
pub const CHAR_COLON : UInt16 = 58

///| '.'
pub const CHAR_DOT : UInt16 = 46

///| '+'
pub const CHAR_PLUS : UInt16 = 43

///| '-'
pub const CHAR_MINUS : UInt16 = 45

///| '>'
pub const CHAR_GT : UInt16 = 62

///| '='
pub const CHAR_EQ : UInt16 = 61

/// '0'
pub const char_0 : UInt16 = 48

/// '9'
pub const char_9 : UInt16 = 57

///| ' '
pub const CHAR_SPACE : UInt16 = 32

///| '\n'
pub const CHAR_LF : UInt16 = 10

///| '\r'
pub const CHAR_CR : UInt16 = 13

///| '\t'
pub const CHAR_TAB : UInt16 = 9

///| '\f'
pub const CHAR__F : UInt16 = 12

///| '\v'
pub const CHAR__V : UInt16 = 12

///| '\u00a0'
pub const CHAR_NON_BREAKING_SPACE : UInt16 = 160

// Sentinel for lastTokenPos when no token has been seen yet
/// -1
pub const no_token_pos : Int = -1

// Character to simulate *EMPTY_CHAR in C
/// '\0'
pub const empty_char_code : UInt16 = 0 // '\0'
